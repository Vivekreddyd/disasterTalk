//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.19
//
package com.disastertalk;

import android.app.ActivityManager;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Spinner;

import com.amazonaws.auth.AWSCredentialsProvider;
import com.amazonaws.auth.CognitoCredentialsProvider;
import com.amazonaws.mobile.auth.core.IdentityManager;
import com.amazonaws.mobile.bots.TextMessage;
import com.amazonaws.mobile.config.AWSConfiguration;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBMapper;
import com.amazonaws.mobileconnectors.lex.interactionkit.InteractionClient;
import com.amazonaws.mobileconnectors.lex.interactionkit.continuations.LexServiceContinuation;
import com.amazonaws.mobileconnectors.lex.interactionkit.listeners.InteractionListener;
import com.amazonaws.models.nosql.UsersDO;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.amazonaws.mobile.config.AWSConfiguration;

import static com.amazonaws.auth.policy.actions.DynamoDBv2Actions.Query;

import com.amazonaws.mobileconnectors.lex.interactionkit.Response;
import com.amazonaws.mobileconnectors.lex.interactionkit.config.InteractionConfig;
import com.amazonaws.mobileconnectors.lex.interactionkit.ui.InteractiveVoiceView;
import com.amazonaws.services.lexrts.model.DialogState;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.common.util.concurrent.Service;
import com.google.firebase.iid.FirebaseInstanceId;

import java.sql.Time;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public class MainActivity extends AppCompatActivity implements View.OnClickListener, AdapterView.OnItemSelectedListener {
    /** Class name for log messages. */
    private static final String LOG_TAG = MainActivity.class.getSimpleName();

    /** Bundle key for saving/restoring the toolbar title. */
    private static final String BUNDLE_KEY_TOOLBAR_TITLE = "title";

    /** The identity manager used to keep track of the current user account. */
    private IdentityManager identityManager;

    /** The toolbar view control. */
    private Toolbar toolbar;

    /** Our navigation drawer class for handling navigation drawer logic. */
//    private NavigationDrawer navigationDrawer;

    /** The helper class used to toggle the left navigation drawer open and closed. */
    private ActionBarDrawerToggle drawerToggle;

    /** Data to be passed between fragments. */
    private Bundle fragmentBundle;

    EditText message_text_field;

    ArrayList<String> stringArrayList;

    ArrayAdapter<String> itemsAdapter;

    ListView listView;

    DynamoDBMapper dynamoDBMapper;

    String userId = "";
    LocationManager locationManager;
    String userLocation;
    Spinner spinner;
    private boolean help;
    private boolean inConversation;
    private InteractionClient lexInteractionClient;
    /**
     * Initializes the Toolbar for use with the activity.
     */
    private void setupToolbar(final Bundle savedInstanceState) {
        toolbar = (Toolbar) findViewById(R.id.toolbar);
        // Set up the activity to use this toolbar. As a side effect this sets the Toolbar's title
        // to the activity's title.
        setSupportActionBar(toolbar);

        if (savedInstanceState != null) {
            // Some IDEs such as Android Studio complain about possible NPE without this check.
            assert getSupportActionBar() != null;

            // Restore the Toolbar's title.
            getSupportActionBar().setTitle(
                    savedInstanceState.getCharSequence(BUNDLE_KEY_TOOLBAR_TITLE));
        }
    }


    Bundle bundle;

    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        bundle = savedInstanceState;
        // Obtain a reference to the identity manager.
        identityManager = IdentityManager.getDefaultIdentityManager();

        setContentView(R.layout.activity_main);

        setupToolbar(savedInstanceState);
        message_text_field = (EditText) findViewById(R.id.messageText);

        stringArrayList = new ArrayList<String>();
        itemsAdapter =
                new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, stringArrayList);
        listView = (ListView) findViewById(R.id.sentMessageList);

        listView.setAdapter(itemsAdapter);
        locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);

        spinner = (Spinner) findViewById(R.id.help_type);
        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this,
                R.array.help_types, android.R.layout.simple_spinner_item);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinner.setAdapter(adapter);

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);

        final AWSCredentialsProvider credentialsProvider = IdentityManager.getDefaultIdentityManager().getCredentialsProvider();
        userId = identityManager.getCachedUserID();
        AmazonDynamoDBClient dynamoDBClient = new AmazonDynamoDBClient(credentialsProvider);
        AWSConfiguration awsConfig = new AWSConfiguration(this);
        this.dynamoDBMapper = DynamoDBMapper.builder()
                .dynamoDBClient(dynamoDBClient)
                .awsConfiguration(awsConfig)
                .build();

        locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);

        if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            Log.d("LOCATION", "NOT GRANTED");
        }else
        storeLocation( locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER));
        init();
        Log.d("FCM", FirebaseInstanceId.getInstance().getId());

    }
    public void init(){
        final String TAG = "Bot-Init";
        InteractiveVoiceView voiceView =
                (InteractiveVoiceView) findViewById(R.id.voiceInterface);

        voiceView.setInteractiveVoiceListener(
                new InteractiveVoiceView.InteractiveVoiceListener() {

                    @Override
                    public void dialogReadyForFulfillment(Map slots, String intent) {
                        Log.d(TAG, String.format(
                                Locale.US,
                                "Dialog ready for fulfillment:\n\tIntent: %s\n\tSlots: %s",
                                intent,
                                slots.toString()));
                    }

                    @Override
                    public void onResponse(Response response) {
                        Log.d(TAG, "Bot response: " + response.getTextResponse());
                    }

                    @Override
                    public void onError(String responseText, Exception e) {
                        Log.e(TAG, "Error: " + responseText, e);
                    }
                });

        CognitoCredentialsProvider credentialsProvider =
                IdentityManager.getDefaultIdentityManager()
                        .getUnderlyingProvider();

        voiceView.getViewAdapter().setCredentialProvider(credentialsProvider);

        //replace parameters with your botname, bot-alias
        voiceView.getViewAdapter()
                .setInteractionConfig(
                        new InteractionConfig("OrderFlowersNewMOBILEHUB","$LATEST"));

        voiceView.getViewAdapter()
                .setAwsRegion(getApplicationContext()
                        .getString(R.string.aws_region));
        lexInteractionClient = new InteractionClient(getApplicationContext(),
                credentialsProvider,
                Regions.US_EAST_1, "OrderFlowersNewMOBILEHUB", "test");
        lexInteractionClient.setInteractionListener(interactionListener);
//        credentialsProvider = new CognitoCredentialsProvider(
//                getApplicationContext().getResources().getString(R.string.identity_id_test),
//                Regions.fromName(getApplicationContext().getResources().getString(R.string.aws_region)));
    }
    public void addMessage(TextMessage message){
        stringArrayList.add(message.getFrom()+": "+ message.getMessage());
        itemsAdapter.notifyDataSetChanged();

    }
    public String getCurrentTimeStamp(){
        SimpleDateFormat timeStamp = new SimpleDateFormat("YYYY-MM-DD'T'HH:mm:ss'Z'");
        String format = timeStamp.format(new Date());
        return format;
    }

    final InteractionListener interactionListener = new InteractionListener() {
        String TAG = "INTERACTION_LISTENER";
        @Override
        public void onReadyForFulfillment(final Response response) {
            Log.d(TAG, "Transaction completed successfully");
            addMessage(new TextMessage(response.getTextResponse(), "Bot", getCurrentTimeStamp()));
            inConversation = false;
        }

        @Override
        public void promptUserToRespond(final Response response,
                                        final LexServiceContinuation continuation) {
            addMessage(new TextMessage(response.getTextResponse(), "Bot", getCurrentTimeStamp()));
//            readUserText(continuation);
        }

        @Override
        public void onInteractionError(final Response response, final Exception e) {
            if (response != null) {
                if (DialogState.Failed.toString().equals(response.getDialogState())) {
                    addMessage(new TextMessage(response.getTextResponse(), "Bot",
                            getCurrentTimeStamp()));
                    inConversation = false;
                } else {
                    addMessage(new TextMessage("Please retry", "rx", getCurrentTimeStamp()));
                }
            } else {
                Log.e(TAG, "Interaction error", e);
                inConversation = false;
            }
        }
    };

    protected void storeLocation(Location location){
        if(location!=null){
            userLocation = location.getLatitude() + ", " + location.getLongitude();
            Log.d("LOCATION", userLocation);
        }
    }
    public void startSettingsFragment(){
        getFragmentManager().beginTransaction()
                .replace(R.id.main_fragment_container, new SettingsFragment())
                .commit();

    }
    @Override
    protected void onResume() {
        super.onResume();

    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main_menu, menu);
        return true;}

    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        // Handle action bar item clicks here excluding the home button.
        switch (item.getItemId()) {
            // action with ID action_refresh was selected
            case R.id.action_settings:
                startSettingsFragment();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    protected void onSaveInstanceState(final Bundle bundle) {
        super.onSaveInstanceState(bundle);
        // Save the title so it will be restored properly to match the view loaded when rotation
        // was changed or in case the activity was destroyed.
        if (toolbar != null) {
            bundle.putCharSequence(BUNDLE_KEY_TOOLBAR_TITLE, toolbar.getTitle());
        }
    }

    @Override
    public void onClick(final View view) {
    }

    public void send_Message(View view){
        stringArrayList.add(message_text_field.getText().toString());
        lexInteractionClient.textInForTextOut(message_text_field.getText().toString(), null);
        message_text_field.setText("");
        itemsAdapter.notifyDataSetChanged();
        createNews();
    }

    public void createNews() {
        final UsersDO user = new UsersDO();

        // Use IdentityManager to get the user identity id.
        user.setUserId(this.userId);
        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
        user.setUsername(sharedPref.getString("userid", "none"));
        user.setLocation(userLocation);
        user.setMessage(message_text_field.getText().toString());
        user.setType(help);
        new Thread(new Runnable() {
            @Override
            public void run() {
                if(dynamoDBMapper!=null)
                dynamoDBMapper.save(user);

                // Item saved
            }
        }).start();
    }


    @Override
    protected void onPause() {
        super.onPause();
    }

    @Override
    public void onBackPressed() {
        if (getFragmentManager().findFragmentById(R.id.main_fragment_container) != null) {
            getFragmentManager().beginTransaction().remove(getFragmentManager().findFragmentById(R.id.main_fragment_container)).commit();
        } else {
            super.onBackPressed();
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        List<Fragment> fragments = getSupportFragmentManager().getFragments();
        if (fragments != null) {
            for (Fragment fragment : fragments) {
                fragment.onRequestPermissionsResult(requestCode, permissions, grantResults);
            }
        }
    }

    /**
     * Stores data to be passed between fragments.
     * @param fragmentBundle fragment data
     */
    public void setFragmentBundle(final Bundle fragmentBundle) {
        this.fragmentBundle = fragmentBundle;
    }

    /**
     * Gets data to be passed between fragments.
     * @return fragmentBundle fragment data
     */
    public Bundle getFragmentBundle() {
        return this.fragmentBundle;
    }

    @Override
    public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
        if(i==0){
            help = false;
        }else{
            help = true;
        }
    }

    @Override
    public void onNothingSelected(AdapterView<?> adapterView) {
    }

}
